package com.skwen.remind.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.skwen.remind.bean.CycleConverter;
import java.util.List;

import com.skwen.remind.bean.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Action = new Property(2, String.class, "action", false, "ACTION");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property YearTime = new Property(4, int.class, "yearTime", false, "YEAR_TIME");
        public final static Property MouthTime = new Property(5, int.class, "mouthTime", false, "MOUTH_TIME");
        public final static Property DayTime = new Property(6, int.class, "dayTime", false, "DAY_TIME");
        public final static Property RemindDate = new Property(7, Long.class, "remindDate", false, "REMIND_DATE");
        public final static Property RemindTime = new Property(8, String.class, "remindTime", false, "REMIND_TIME");
        public final static Property SaveTime = new Property(9, Long.class, "saveTime", false, "SAVE_TIME");
        public final static Property Cycles = new Property(10, String.class, "cycles", false, "CYCLES");
        public final static Property IsOver = new Property(11, boolean.class, "isOver", false, "IS_OVER");
        public final static Property IsOpen = new Property(12, boolean.class, "isOpen", false, "IS_OPEN");
        public final static Property Level = new Property(13, int.class, "level", false, "LEVEL");
    }

    private final CycleConverter cyclesConverter = new CycleConverter();

    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"ACTION\" TEXT," + // 2: action
                "\"CONTENT\" TEXT," + // 3: content
                "\"YEAR_TIME\" INTEGER NOT NULL ," + // 4: yearTime
                "\"MOUTH_TIME\" INTEGER NOT NULL ," + // 5: mouthTime
                "\"DAY_TIME\" INTEGER NOT NULL ," + // 6: dayTime
                "\"REMIND_DATE\" INTEGER," + // 7: remindDate
                "\"REMIND_TIME\" TEXT," + // 8: remindTime
                "\"SAVE_TIME\" INTEGER," + // 9: saveTime
                "\"CYCLES\" TEXT," + // 10: cycles
                "\"IS_OVER\" INTEGER NOT NULL ," + // 11: isOver
                "\"IS_OPEN\" INTEGER NOT NULL ," + // 12: isOpen
                "\"LEVEL\" INTEGER NOT NULL );"); // 13: level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(3, action);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getYearTime());
        stmt.bindLong(6, entity.getMouthTime());
        stmt.bindLong(7, entity.getDayTime());
 
        Long remindDate = entity.getRemindDate();
        if (remindDate != null) {
            stmt.bindLong(8, remindDate);
        }
 
        String remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindString(9, remindTime);
        }
 
        Long saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindLong(10, saveTime);
        }
 
        List cycles = entity.getCycles();
        if (cycles != null) {
            stmt.bindString(11, cyclesConverter.convertToDatabaseValue(cycles));
        }
        stmt.bindLong(12, entity.getIsOver() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsOpen() ? 1L: 0L);
        stmt.bindLong(14, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(3, action);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getYearTime());
        stmt.bindLong(6, entity.getMouthTime());
        stmt.bindLong(7, entity.getDayTime());
 
        Long remindDate = entity.getRemindDate();
        if (remindDate != null) {
            stmt.bindLong(8, remindDate);
        }
 
        String remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindString(9, remindTime);
        }
 
        Long saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindLong(10, saveTime);
        }
 
        List cycles = entity.getCycles();
        if (cycles != null) {
            stmt.bindString(11, cyclesConverter.convertToDatabaseValue(cycles));
        }
        stmt.bindLong(12, entity.getIsOver() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsOpen() ? 1L: 0L);
        stmt.bindLong(14, entity.getLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // action
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getInt(offset + 4), // yearTime
            cursor.getInt(offset + 5), // mouthTime
            cursor.getInt(offset + 6), // dayTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // remindDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remindTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // saveTime
            cursor.isNull(offset + 10) ? null : cyclesConverter.convertToEntityProperty(cursor.getString(offset + 10)), // cycles
            cursor.getShort(offset + 11) != 0, // isOver
            cursor.getShort(offset + 12) != 0, // isOpen
            cursor.getInt(offset + 13) // level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setAction(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYearTime(cursor.getInt(offset + 4));
        entity.setMouthTime(cursor.getInt(offset + 5));
        entity.setDayTime(cursor.getInt(offset + 6));
        entity.setRemindDate(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setRemindTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSaveTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setCycles(cursor.isNull(offset + 10) ? null : cyclesConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setIsOver(cursor.getShort(offset + 11) != 0);
        entity.setIsOpen(cursor.getShort(offset + 12) != 0);
        entity.setLevel(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
